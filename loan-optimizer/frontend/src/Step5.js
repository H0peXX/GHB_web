// src/Step5.js
import React, { useState, useEffect } from 'react';
import './App.css';
import { useNavigate } from 'react-router-dom';

function Step5() {
  const navigate = useNavigate();

  const [principal, setPrincipal] = useState('');
  const [rate, setRate] = useState('');
  const [term, setTerm] = useState('');
  const [monthly, setMonthly] = useState('');
  const [payment, setPayment] = useState('');
  const [result, setResult] = useState(null);
  const [tip, setTip] = useState('');
  const [suggestion, setSuggestion] = useState('');
  const [recommendation, setRecommendation] = useState('');
  const [transactions, setTransactions] = useState([]);
  const [remainingMonths, setRemainingMonths] = useState('');
  const [oldTerm, setOldTerm] = useState('');
  const [income, setIncome] = useState('');

  useEffect(() => {
    const knownIncome = 11250;
    const knownPrincipal = 200000;
    const knownMonthly = 1319.91;

    setPrincipal(knownPrincipal.toString());
    setRate('5');
    setTerm('240');
    setMonthly(knownMonthly.toString());
    setPayment('');
    setRemainingMonths('240');
    setOldTerm('240');
    setIncome(knownIncome.toString());

    generateSuggestion(knownIncome, knownPrincipal, knownMonthly);
  }, []);

  const generateSuggestion = (incomeVal, principalVal, monthlyVal) => {
    let repaymentRate;
    let note;

    if (incomeVal < 6000) {
      repaymentRate = 0;
      note = 'üõ°Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≠‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≤‡∏à‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß';
      setSuggestion('');
      setRecommendation(`${note} ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ${incomeVal.toLocaleString()} ‡∏ö‡∏≤‡∏ó`);
      return;
    } else if (incomeVal <= 10000) {
      repaymentRate = 0.10;
      note = 'üìâ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ä‡∏≥‡∏£‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏ö‡∏≤‡πÜ';
    } else if (incomeVal <= 15000) {
      repaymentRate = 0.25;
      note = 'üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ä‡∏≥‡∏£‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥';
    } else {
      repaymentRate = 0.35;
      note = 'üöÄ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏π‡πâ';
    }

    const suggestedPayment = Math.round(incomeVal * repaymentRate);
    const maxSuggested = Math.round(incomeVal * (repaymentRate + 0.1));
    const estimatedMonths = monthlyVal > 0 ? Math.floor(suggestedPayment / monthlyVal) : 0;

    setSuggestion(`üí° ‡∏•‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${suggestedPayment.toLocaleString()} - ${maxSuggested.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${estimatedMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)`);

    setRecommendation(`${note} ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ${incomeVal.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ${suggestedPayment.toLocaleString()} - ${maxSuggested.toLocaleString()} ‡∏ö‡∏≤‡∏ó (‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${estimatedMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)`);
  };

  const handleCalculate = async () => {
    if (!payment || isNaN(payment)) return;

    const extraPayment = parseFloat(payment);
    const monthlyPayment = parseFloat(monthly);
    const totalPayment = extraPayment + monthlyPayment;

    if (totalPayment > parseFloat(principal)) {
      alert('‚ùå ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠');
      return;
    }

    const payload = {
      principal,
      rate,
      term,
      monthly,
      payment: totalPayment.toString(),
      income,
      oldTerm
    };

    const date = new Date().toLocaleDateString();

    try {
      const res = await fetch('http://localhost:4000/api/calculate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const data = await res.json();

      const monthsReduced = parseInt(oldTerm) - parseInt(data.newTerm);

      setResult({
        message: data.message,
        newPrincipal: data.newPrincipal,
        newPayment: data.newPayment
      });

      setTip(data.tip);
      setSuggestion(data.suggestion);
      setRemainingMonths(data.newTerm.toString());
      setOldTerm(data.newTerm.toString());
      setPrincipal(data.newPrincipal.toString());

      setTransactions(prev => [
        {
          date,
          amount: totalPayment.toFixed(2),
          status: data.status,
          remaining: data.remaining,
          monthsReduced: monthsReduced > 0 ? monthsReduced : 0
        },
        ...prev
      ]);

      setPayment('');
    } catch (err) {
      console.error('Error:', err);
    }
  };

  const handleIncomeChange = (e) => {
    const value = e.target.value;
    setIncome(value);
    if (!isNaN(parseFloat(value))) {
      generateSuggestion(parseFloat(value), parseFloat(principal), parseFloat(monthly));
    }
  };

  return (
    <div className="App">
      <h2>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>

      <div className="summary-box">
        <p><strong>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> {parseFloat(principal).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
        <p><strong>‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</strong> {parseFloat(monthly).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
        <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> {remainingMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
        <p style={{ color: 'green' }}><strong>{recommendation}</strong></p>
      </div>

      <div className="input-group">
        <label>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</label>
        <input value={income} onChange={handleIncomeChange} placeholder="‡πÄ‡∏ä‡πà‡∏ô 12000" />
      </div>

      <div className="input-group">
        <label>‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©</label>
        <input
          type="number"
          min="0"
          value={payment}
          onChange={(e) => {
            const value = e.target.value;
            if (/^\d*\.?\d*$/.test(value)) {
              if (parseFloat(value) <= parseFloat(principal)) {
                setPayment(value);
              } else {
                alert('‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠');
              }
            }
          }}
          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏ä‡πà‡∏ô 10000"
        />
        <button onClick={handleCalculate}>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</button>
        {monthly && (
          <p>
            üíµ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {(parseFloat(monthly) + parseFloat(payment || 0)).toLocaleString()} ‡∏ö‡∏≤‡∏ó
            {payment && parseFloat(payment) > 0 && (
              <> üí° ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì <strong>{Math.max(Math.floor((parseFloat(payment) + parseFloat(monthly)) / parseFloat(monthly)) - 1, 0)} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</strong></>
            )}
          </p>
        )}
      </div>

      {result && (
        <div className="result">
          <p><strong>{result.message}</strong></p>
          <p>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà: {parseFloat(result.newPrincipal).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
          <p>‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {parseFloat(result.newPayment).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
          {oldTerm !== remainingMonths && (
            <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°: {oldTerm} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‚Üí ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {remainingMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
          )}
        </div>
      )}

      {tip && (
        <div className="tip">
          <p><em>{tip}</em></p>
        </div>
      )}

      {suggestion && (
        <div className="suggestion">
          <p><strong>{suggestion}</strong></p>
        </div>
      )}

      {transactions.length > 0 && (
        <div className="bank-style-log">
          <h3>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
          <table>
            <thead>
              <tr>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th>‡∏¢‡∏≠‡∏î‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                <th>‡∏•‡∏î‡∏•‡∏á (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)</th>
              </tr>
            </thead>
            <tbody>
              {transactions.map((txn, index) => (
                <tr key={index}>
                  <td>{txn.date}</td>
                  <td>{txn.amount} ‡∏ö‡∏≤‡∏ó</td>
                  <td>{txn.status}</td>
                  <td>{txn.remaining} ‡∏ö‡∏≤‡∏ó</td>
                  <td>{txn.monthsReduced > 0 ? `‚Üì ${txn.monthsReduced}` : '-'}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <div style={{ marginTop: '30px', textAlign: 'center' }}>
        <button onClick={() => navigate('/')}>üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</button>
      </div>
    </div>
  );
}

export default Step5;