import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [principal, setPrincipal] = useState('');
  const [rate, setRate] = useState('');
  const [term, setTerm] = useState('');
  const [monthly, setMonthly] = useState('');
  const [payment, setPayment] = useState('');
  const [result, setResult] = useState(null);
  const [tip, setTip] = useState('');
  const [suggestion, setSuggestion] = useState('');
  const [recommendation, setRecommendation] = useState('');
  const [transactions, setTransactions] = useState([]);
  const [remainingMonths, setRemainingMonths] = useState('');
  const [oldTerm, setOldTerm] = useState('');
  const [income, setIncome] = useState('');

  useEffect(() => {
    const knownIncome = 11250;

    setPrincipal('200000');
    setRate('5');
    setTerm('240');
    setMonthly('1319.91');
    setPayment('');
    setSuggestion('üí° ‡∏•‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏£‡∏ß‡∏°');
    setRemainingMonths('240');
    setOldTerm('240');
    setIncome(knownIncome.toString());

    const recommendedMessage =
      knownIncome > 10000
        ? `üìå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ${knownIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏© ${Math.round(1319.91 * 1.5).toLocaleString()} - ${(1319.91 * 3).toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô`
        : `üìå ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${knownIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞`;
    setRecommendation(recommendedMessage);
  }, []);

  const handleCalculate = () => {
    const P = parseFloat(principal);
    const r = parseFloat(rate) / 100 / 12;
    const n = parseInt(term);
    const mp = parseFloat(monthly);
    const X = parseFloat(payment);
    const incomeNum = parseFloat(income);

    if (isNaN(P) || isNaN(r) || isNaN(n) || isNaN(mp) || isNaN(X)) return;

    let newPrincipal = P;
    let tipMessage = '';
    let suggestionMessage = '';
    const date = new Date().toLocaleDateString();
    let status = '';
    let remaining = P.toFixed(2);
    let newTerm = n;

    if (X >= 3 * mp) {
      newPrincipal = P - X;
      if (newPrincipal <= 0) {
        setResult({
          message: '‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!',
          newPrincipal: 0,
          newPayment: 0,
        });
        tipMessage = '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏•‡∏î‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢';
        suggestionMessage = 'üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!';
        status = '‚úÖ ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ';
        remaining = '0.00';
        setRemainingMonths('0');
      } else {
        const newPayment = (newPrincipal * r) / (1 - Math.pow(1 + r, -n));
        const numerator = Math.log(mp / (mp - newPrincipal * r));
        const denominator = Math.log(1 + r);
        newTerm = Math.ceil(numerator / denominator);

        setResult({
          message: '‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          newPrincipal: newPrincipal.toFixed(2),
          newPayment: newPayment.toFixed(2),
        });
        tipMessage = '‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏π‡πâ';
        suggestionMessage = `‚úÖ ‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏≤‡∏Å ${oldTerm} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‚Üí ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${newTerm} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô`; 
        status = '‚úÖ ‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô';
        remaining = newPrincipal.toFixed(2);
        setPrincipal(newPrincipal.toFixed(2));
        setOldTerm(newTerm.toString());
        setRemainingMonths(newTerm.toString());
      }
    } else {
      setResult({
        message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
        newPrincipal: P.toFixed(2),
        newPayment: mp.toFixed(2),
      });
      tipMessage = '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô';
      suggestionMessage = `‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${newTerm} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)`;
      status = '‚ö†Ô∏è ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
    }

    setTip(tipMessage);
    setSuggestion(suggestionMessage);
    setTransactions(prev => [
      {
        date,
        amount: X.toFixed(2),
        status,
        remaining
      },
      ...prev
    ]);
    setPayment('');
  };

  const handleIncomeChange = (e) => {
    const value = e.target.value;
    setIncome(value);
    if (!isNaN(parseFloat(value))) {
      const incomeVal = parseFloat(value);
      const newRecommended = incomeVal > 10000
        ? `üìå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ${incomeVal.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏© ${Math.round(monthly * 1.5).toLocaleString()} - ${(monthly * 3).toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô`
        : `üìå ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${incomeVal.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞`;
      setRecommendation(newRecommended);
    }
  };

  return (
    <div className="App">
      <h2>üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>

      <div className="summary-box">
        <p><strong>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> {parseFloat(principal).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
        <p><strong>‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</strong> {parseFloat(monthly).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
        <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> {remainingMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
        <p style={{ color: 'green' }}><strong>{recommendation}</strong></p>
      </div>

      <div className="input-group">
        <label>üì• ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</label>
        <input value={income} onChange={handleIncomeChange} placeholder="‡πÄ‡∏ä‡πà‡∏ô 12000" />
      </div>

      <div className="input-group">
        <label>üí∏ ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©</label>
        <input value={payment} onChange={e => setPayment(e.target.value)} placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏ä‡πà‡∏ô 10000" />
        <button onClick={handleCalculate}>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</button>
      </div>

      {result && (
        <div className="result">
          <p><strong>{result.message}</strong></p>
          <p>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà: {parseFloat(result.newPrincipal).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
          <p>‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {parseFloat(result.newPayment).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
          {oldTerm !== remainingMonths && (
            <p>üìâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°: {oldTerm} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‚Üí ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {remainingMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
          )}
        </div>
      )}

      {tip && (
        <div className="tip">
          <p><em>{tip}</em></p>
        </div>
      )}

      {suggestion && (
        <div className="suggestion">
          <p><strong>{suggestion}</strong></p>
        </div>
      )}

      {transactions.length > 0 && (
        <div className="bank-style-log">
          <h3>üìÑ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
          <table>
            <thead>
              <tr>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th>‡∏¢‡∏≠‡∏î‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
              </tr>
            </thead>
            <tbody>
              {transactions.map((txn, index) => (
                <tr key={index}>
                  <td>{txn.date}</td>
                  <td>{txn.amount} ‡∏ö‡∏≤‡∏ó</td>
                  <td>{txn.status}</td>
                  <td>{txn.remaining} ‡∏ö‡∏≤‡∏ó</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

export default App;
